'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = _interopDefault(require('path'));
var EventEmitter = _interopDefault(require('events'));
var chalk = _interopDefault(require('chalk'));
var minimost = _interopDefault(require('minimost'));
var readPkg = _interopDefault(require('read-pkg-up'));
var table = _interopDefault(require('text-table'));
var stringWidth = _interopDefault(require('string-width'));
var redent = _interopDefault(require('redent'));

class CacError extends Error {
  constructor(message) {
    super(message);
    this.name = 'CacError';
  }
}

function parseType(type) {
  if (typeof type === 'string' || type instanceof String) {
    return type
  }

  if (type === Boolean) {
    return 'boolean'
  }
}

function orderNames(names) {
  return names.sort((a, b) => {
    return a.length > b.length
  })
}

function textTable(data) {
  return table(data, {
    stringLength: stringWidth
  })
}

function prefixOption(option) {
  return option.length === 1 ? `-${option}` : `--${option}`
}

function isExplictCommand(name) {
  return name && !name.startsWith('-')
}

function invariant(exp, message) {
  if (!exp) {
    throw new CacError(message)
  }
}

class Options {
  constructor() {
    this.options = [];
  }

  add(name, opt) {
    opt = opt || {};
    if (typeof opt === 'string') {
      opt = { desc: opt };
    }
    const option = Object.assign({}, opt,
      {name,
      alias: opt.alias || [],
      desc: opt.desc,
      default: opt.default,
      type: parseType(opt.type)});
    option.names = orderNames([option.name].concat(option.alias));
    this.options.push(option);
    return this
  }

  getDefaultsMapping() {
    return this.options
      .filter(option => {
        return typeof option.default !== 'undefined'
      })
      .reduce((res, next) => {
        res[next.name] = next.default;
        return res
      }, {})
  }

  getOptionsByType(type) {
    return this.options.filter(option => type === option.type)
  }

  getOptionNamesByType(type) {
    return this.getOptionsByType(type).map(option => option.name)
  }

  getAliasMap() {
    return this.options.reduce((res, next) => {
      res[next.name] = next.alias;
      return res
    }, {})
  }

  isEmpty() {
    return this.options.length === 0
  }

  toString() {
    return textTable(
      this.options.map(option => {
        const extra = [];
        if (typeof option.default !== 'undefined') {
          extra.push(`Default: ${JSON.stringify(option.default)}`);
        }
        if (typeof option.type === 'string') {
          extra.push(`Type: ${option.type}`);
        }
        return [
          option.names.map(v => chalk.yellow(prefixOption(v))).join(', '),
          chalk.dim(option.desc),
          extra.map(v => chalk.dim(`[${v}]`)).join(' ')
        ]
      })
    )
  }
}

// @ts-check
class Command {
  constructor(name, option, handler) {
    option = option || {};
    if (typeof option === 'string') {
      option = { desc: option };
    }

    invariant(typeof name === 'string', 'Expect command name to be a string.');
    invariant(option.desc, 'Expect command to have a description.');

    const command = Object.assign({}, option,
      {name,
      alias: option.alias || [],
      desc: option.desc});

    command.names = orderNames([command.name].concat(command.alias));

    this.command = command;
    this.options = new Options();
    this.handler = handler;
  }

  option() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    (ref = this.options).add.apply(ref, args);
    return this
    var ref;
  }
}

class Help {
  constructor(root, command, opts) {
  if ( opts === void 0 ) opts = {};

    this.root = root;
    this.command = command;
    this.opts = opts;
  }

  output() {
    let help = '\n';

    help += chalk.cyan(this.root.bin);

    if (this.root.pkg.version) {
      help += ` ${this.root.pkg.version}`;
    }

    help += '\n\n';

    if (this.root.pkg.description) {
      help += `${chalk.dim.italic(this.root.pkg.description)}\n\n`;
    }

    const commandText = chalk.magenta(
      this.opts.displayCommands ? '<command> ' : `${this.command.command.name} `
    );
    help += `${chalk.bold('USAGE')}\n\n`;
    help += redent(
      `${chalk.dim.italic(this.root.bin)} ${commandText}${chalk.yellow(
        '[options]'
      )}`,
      2
    );
    help += '\n\n';

    if (this.opts.displayCommands && !this.root.isCommandsEmpty()) {
      help += `${chalk.bold('COMMANDS')}\n\n`;

      help += redent(this.root.commandsToString(), 2);
      help += '\n\n';
    }

    if (this.command && !this.command.options.isEmpty()) {
      help += `${chalk.bold('COMMAND OPTIONS')}\n\n`;

      help += redent(this.command.options.toString(), 2);
      help += '\n\n';
    }

    if (!this.root.options.isEmpty()) {
      help += `${chalk.bold('GLOBAL OPTIONS')}\n\n`;

      help += redent(this.root.options.toString(), 2);
      help += '\n';
    }

    console.log(redent(help, 2));
  }
}

// Prevent caching of this module so module.parent is always accurate
delete require.cache[__filename];
const parentDir = path.dirname(module.parent.filename);

class Cac extends EventEmitter {
  constructor(ref) {
    if ( ref === void 0 ) ref = {};
    var bin = ref.bin;
    var pkg = ref.pkg;

    super();
    this.bin = bin || path.basename(process.argv[1]);
    this.commands = [];
    this.options = new Options();

    this.pkg = Object.assign(
      {},
      pkg || readPkg.sync({ cwd: parentDir, normalize: false }).pkg
    );

    this.option('version', {
      alias: 'v',
      type: 'boolean',
      desc: 'Display version'
    }).option('help', {
      alias: 'h',
      type: 'boolean',
      desc: `Display help (You're already here)`
    });
  }

  use(plugin) {
    if (Array.isArray(plugin)) {
      plugin.forEach(p => this.use(p));
    } else if (typeof plugin === 'function') {
      plugin(this);
    } else {
      throw new TypeError('plugin has to be a function or an array of it.')
    }
    return this
  }

  option() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    (ref = this.options).add.apply(ref, args);
    return this
    var ref;
  }

  command() {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    const command = new (Function.prototype.bind.apply( Command, [ null ].concat( args) ));
    this.commands.push(command);
    return command
  }

  commandsToString() {
    return textTable(
      this.commands.map((ref) => {
        var command = ref.command;

        return [
          command.names.map(v => chalk.magenta(v)).join(', '),
          chalk.dim(command.desc)
        ]
      })
    )
  }

  isCommandsEmpty() {
    return this.commands.length === 0
  }

  findCommandByNameOrAlias(name) {
    return this.commands.filter((ref) => {
      var command = ref.command;

      return command.names.indexOf(name) > -1
    })[0]
  }

  getCommand(name) {
    // No command name, use default command
    if (!isExplictCommand(name)) {
      return {
        command: this.findCommandByNameOrAlias('*'),
        sliceFirstArg: false
      }
    }

    const command = this.findCommandByNameOrAlias(name);

    // Found sub command
    if (command) {
      return {
        command,
        sliceFirstArg: true
      }
    }

    // Fallback to default command
    return {
      command: this.findCommandByNameOrAlias('*'),
      sliceFirstArg: false
    }
  }

  get argv() {
    return this.parse(null, { run: false })
  }

  showHelp() {
    if (!this.started) {
      throw new Error(
        '[cac] You have to call .parse() before running .showHelp()'
      )
    }

    const displayCommands = !isExplictCommand(this.firstArg);
    const help = new Help(this, this.matchedCommand, {
      displayCommands
    });

    help.output();
    return this
  }

  showVersion() {
    console.log(this.pkg.version);
  }

  parse(argv, ref) {
    if ( ref === void 0 ) ref = {};
    var run = ref.run; if ( run === void 0 ) run = true;

    this.started = true;
    argv = argv || process.argv.slice(2);
    this.firstArg = argv[0];
    var ref$1 = this.getCommand(this.firstArg);
    var command = ref$1.command;
    var sliceFirstArg = ref$1.sliceFirstArg;
    this.matchedCommand = command;

    var ref$2 = minimost(argv, {
      boolean: this.options.getOptionNamesByType('boolean').concat( (command ? command.options.getOptionNamesByType('boolean') : [])
      ),
      string: this.options.getOptionNamesByType('string').concat( (command ? command.options.getOptionNamesByType('string') : [])
      ),
      default: Object.assign({}, this.options.getDefaultsMapping(),
        (command ? command.options.getDefaultsMapping() : [])),
      alias: Object.assign({}, this.options.getAliasMap(),
        (command ? command.options.getAliasMap() : {}))
    });
    var input = ref$2.input;
    var flags = ref$2.flags;

    input = sliceFirstArg ? input.slice(1) : input;

    this.emit('parsed', command, input, flags);

    if (!run) {
      return { input, flags }
    }

    if (flags.help) {
      this.showHelp();
    } else if (flags.version) {
      this.showVersion();
    } else if (command && command.handler) {
      try {
        const res = command.handler(input, flags);
        if (res && res.catch) {
          res.catch(err => this.handleError(err));
        }
      } catch (err) {
        this.handleError(err);
      }
    }

    this.emit('executed', command, input, flags);
  }

  handleError(err) {
    if (EventEmitter.listenerCount(this, 'error') === 0) {
      console.error(err.stack);
      process.exitCode = process.exitCode || 1;
    } else {
      this.emit('error', err);
    }
  }
}

var index = function(opts) {
  return new Cac(opts)
};

module.exports = index;
